@page "/produtos/edit/{id:long}"
@using CatalogoDeProdutos.Core.models
@inject IProdutoHandler produtoHandler
@inject ISnackbar Snackbar

<h3>Atualizar Produto</h3>

<div class="toast-container position-fixed bottom-0 start-50 translate-middle-x p-3">
    <div id="toastProdutoCriado" 
      class="toast" role="alert" 
      aria-live="assertive" 
      aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto">Sucesso</strong>
            <button type="button" 
            class="btn-close"
             data-bs-dismiss="toast" 
             aria-label="Close"></button>
        </div>
        <div class="toast-body">
            Produto atualizado com sucesso!
        </div>
    </div>
</div>



@if (produto == null)
{
    <p><em>Carregando...</em></p>
}
else
{
    @if (erroMessage != null)
    {
        <div class="alert alert-danger" role="alert">
            @erroMessage
        </div>
    }

    <EditForm Model="@produto" OnValidSubmit="AtualizarProduto">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="Nome" class="form-label">Nome</label>
            <InputText id="nome" class="form-control" @bind-Value="produto.Nome" />
            <ValidationMessage For="@(() => produto.Nome)" />
        </div>

        <div class="mb-3">
            <label for="preco" class="form-label">Preço</label>
            <InputNumber id="preco" class="form-control" @bind-Value="produto.Preco" />
            <ValidationMessage For="@(() => produto.Preco)" />
        </div>

        <div class="mb-3">
            <label for="descricao" class="form-label">Descrição</label>
            <InputTextArea id="descricao" class="form-control" @bind-Value="produto.Descricao" />
            <ValidationMessage For="@(() => produto.Descricao)" />
        </div>
        <div class="mb-3">
            <label for="quantidade" class="form-label">Quantidade</label>
            <InputNumber id="quantidade" class="form-control" @bind-Value="produto.Quantidade" />
            <ValidationMessage For="@(() => produto.Quantidade)" />
        </div>
        <div class="mb-3">
            <label for="tipo" class="form-label">Tipo</label>
            <InputSelect id="tipo" class="form-control" @bind-Value="produto.Tipo">
                @foreach (var tipo in Enum.GetValues(typeof(Tipo)).Cast<Tipo>())
                {
                    <option value="@tipo">@tipo</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => produto.Tipo)" />
        </div>



        <button type="submit" class="btn btn-primary">Atualizar Produto</button>
        <button type="button" class="btn btn-secondary" @onclick="Voltar">Voltar</button>
    </EditForm>
}

@code {
    [Parameter]
    public long id { get; set; }

    private UpdateProdutoRequest produto { get; set; } = new UpdateProdutoRequest();
    private string? erroMessage { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        var requeste = new GetProdutoByIdRequest { Id = id };

        var response = await produtoHandler.GetProdutoById(requeste);


        if (response.Success)
        {
            var data = response.Data;
            produto = new UpdateProdutoRequest
                {
                    ProdutoId = data.Id,
                    Nome = data.Nome,
                    Preco = data.Preco,
                    Descricao = data.Descricao,
                    Quantidade = data.Quantidade,
                    Tipo = data.Tipo
                };
        }
        else
        {
            erroMessage = response.Message;
        }
    }

    private async Task AtualizarProduto()
    {
        var response = await produtoHandler.UpdateProduto(produto);
        if (response.Success)
        {
            await JSRuntime.InvokeVoidAsync("showToast");
        }
        else
        {
            erroMessage = response.Message;
        }
    }

    private void Voltar()
    {
        Navigation.NavigateTo("/produtos");
    }


    private async Task ShowSuccessToast()
    {
        var toastElement = await
        JSRuntime.InvokeAsync<IJSObjectReference>
        ("import", new object[] { "/js/bootstrap.min.js" });
        await toastElement.InvokeVoidAsync("show");
    }

}
