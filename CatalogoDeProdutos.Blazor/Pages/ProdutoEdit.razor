@page "/produtos/edit/{id:long}"
@using CatalogoDeProdutos.Core.models
@inject ISnackbar Snackbar
@inject IProdutoService produtoService 

<h3>Atualizar Produto</h3>


@if (_produto == null)
{
    <p><em>Carregando...</em></p>
}
else
{
    @if (erroMessage != null)
    {
        <div class="alert alert-danger" role="alert">
            @erroMessage
        </div>
    }

    <EditForm Model="@_produto" OnValidSubmit="AtualizarProduto">
        <DataAnnotationsValidator />

        <div class="mb-3">
            <label for="Nome" class="form-label">Nome</label>
            <InputText id="nome" class="form-control" @bind-Value="_produto.Nome" />
            <ValidationMessage For="@(() => _produto.Nome)" />
        </div>

        <div class="mb-3">
            <label for="preco" class="form-label">Preço</label>
            <InputNumber id="preco" class="form-control" @bind-Value="_produto.Preco" />
            <ValidationMessage For="@(() => _produto.Preco)" />
        </div>

        <div class="mb-3">
            <label for="descricao" class="form-label">Descrição</label>
            <InputTextArea id="descricao" class="form-control" @bind-Value="_produto.Descricao" />
            <ValidationMessage For="@(() => _produto.Descricao)" />
        </div>
        <div class="mb-3">
            <label for="quantidade" class="form-label">Quantidade</label>
            <InputNumber id="quantidade" class="form-control" @bind-Value="_produto.Quantidade" />
            <ValidationMessage For="@(() => _produto.Quantidade)" />
        </div>
        <div class="mb-3">
            <label for="tipo" class="form-label">Tipo</label>
            <InputSelect id="tipo" class="form-control" @bind-Value="_produto.Tipo">
                @foreach (var tipo in Enum.GetValues(typeof(Tipo)).Cast<Tipo>())
                {
                    <option value="@tipo">@tipo</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => _produto.Tipo)" />
        </div>



        <button type="submit" class="btn btn-primary">Atualizar Produto</button>
    </EditForm>
}

@code {
    [Parameter]
    public long id { get; set; }

    private UpdateProdutoRequest _produto { get; set; } = new UpdateProdutoRequest();
    private string? erroMessage { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        var response = await produtoService.GetProdutoById(new GetProdutoByIdRequest { Id = id });
        if (response.Data != null)
        {
            _produto = new UpdateProdutoRequest
                {
                    ProdutoId = response.Data.Id,
                    Nome = response.Data.Nome,
                    Preco = response.Data.Preco,
                    Descricao = response.Data.Descricao,
                    Quantidade = response.Data.Quantidade,
                    Tipo = response.Data.Tipo
                };
        }
        else
        {
            erroMessage = response.Message;
        }
    }

    private async Task AtualizarProduto()
    {
        await produtoService.UpdateProduto(_produto);
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
        Snackbar.Add("Produto atualizado com sucesso!", Severity.Success, configure => {
             configure.HideIcon = true;
        });

        Navigation.NavigateTo("/produtos");
    }

}
