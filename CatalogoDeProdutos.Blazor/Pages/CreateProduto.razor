@page "/produto/criar"
@inject IProdutoHandler produtoHandler
@inject ISnackbar Snackbar


<h1>Criar Produto</h1>

<div class="toast-container position-fixed bottom-0 start-50 translate-middle-x p-3">
    <div id="toastProdutoCriado" 
      class="toast" role="alert" 
      aria-live="assertive" 
      aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto">Sucesso</strong>
            <button type="button" 
            class="btn-close"
             data-bs-dismiss="toast" 
             aria-label="Close"></button>
        </div>
        <div class="toast-body">
            Produto criado com sucesso!
        </div>
    </div>
</div>

<EditForm Model="novoProduto" OnValidSubmit="AdicionarProduto">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="nome" class="form-label">Nome</label>
        <InputText id="nome" class="form-control" @bind-Value="novoProduto.Nome" />
        <ValidationMessage For="@(() => novoProduto.Nome)" />
    </div>

    <div class="mb-3">
        <label for="preco" class="form-label">Preço</label>
        <InputNumber id="preco" class="form-control" @bind-Value="novoProduto.Preco" />
        <ValidationMessage For="@(() => novoProduto.Preco)" />
    </div>

    <div class="mb-3">
        <label for="descricao" class="form-label">Descrição</label>
        <InputTextArea id="descricao" class="form-control" @bind-Value="novoProduto.Descricao" />
        <ValidationMessage For="@(() => novoProduto.Descricao)" />
    </div>

    <div class="mb-3">
        <label for="quantidade" class="form-label">Quantidade</label>
        <InputNumber id="quantidade" class="form-control" @bind-Value="novoProduto.Quantidade" />
        <ValidationMessage For="@(() => novoProduto.Quantidade)" />
    </div>

    <div class="mb-3">
        <label for="tipo" class="form-label">Tipo</label>
        <InputSelect id="tipo" class="form-control" @bind-Value="novoProduto.Tipo">
            @foreach (var tipo in Enum.GetValues
            (typeof(CatalogoDeProdutos.Core.models.Enum.Tipo))
            .Cast<CatalogoDeProdutos.Core.models.Enum.Tipo>())
            {
                <option value="@tipo">@tipo</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => novoProduto.Tipo)" />
    </div>

    <button type="submit" class="btn btn-primary">Adicionar Produto</button>
    <button type="button" class="btn btn-secondary" @onclick="Voltar">Voltar</button>
</EditForm>

@code {
    private CreateProdutoRequest novoProduto { get; set; } = new CreateProdutoRequest();
    private string errorMessage { get; set; } = string.Empty;

    private async Task AdicionarProduto()
    {
        var response = await produtoHandler.CreateProduto(novoProduto);

        if (response.Success)
        {
            await JSRuntime.InvokeVoidAsync("showToast");
            novoProduto = new CreateProdutoRequest();
        }
        else
        {
            Console.WriteLine(response.Message);
        }
    }

    private void Voltar()
    {
        Navigation.NavigateTo("/produtos");
    }

    private async Task ShowSuccessToast()
    {
        var toastElement = await
        JSRuntime.InvokeAsync<IJSObjectReference>
        ("import", new object[] { "/js/bootstrap.min.js" });
        await toastElement.InvokeVoidAsync("show");
    }
}
