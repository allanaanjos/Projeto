@page "/Produtos"
@using CatalogoDeProdutos.Core.models
@inject IProdutoService produtoService 
@inject IJSRuntime JSRuntime


<h1>PRODUTOS</h1>

@if (_produtos == null)
{
    <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true"   />
}
else if(!_produtos.Any()){
    <MudText Align="Align.Left" Typo="Typo.h6">Nenhum produto foi encontrado.</MudText>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>NOME</th>
                <th>PREÇO</th>
                <th>DESCRIÇÃO</th>
                <th>QUANTIDADE</th>
                <th>TIPO</th>
                <th>AÇÕES</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var produto in _produtos)
            {
                <List produtos="produto" OnClick="(() => ExcluirProduto(produto.Id))"></List>

            }
        </tbody>
    </table>
}

@code {
    private  List<Produto> _produtos { get; set; } = new List<Produto>();

    protected override async Task OnInitializedAsync()
    {
        await CarregarProdutos();
    }

    public async Task CarregarProdutos()
    {
        var response = await produtoService.GetProdutos(new PagedRequest { PageNumber = 1, PageSize = 10 });

        Console.WriteLine($"Resposta ao obter produtos: Success={response!.Success}, Message={response.Message}");
         
        _produtos = response.Data!;
    }

    public async Task ExcluirProduto(long produtoId)
    {
        bool confirmado = await JSRuntime.InvokeAsync<bool>
        ("confirme",
        new object[]
           { $"Tem certeza que deseja excluir o produto {produtoId}?" });


        await produtoService.ExcluirProduto(new DeleteProdutoRequest { id = produtoId });
        await CarregarProdutos();


    }


}
