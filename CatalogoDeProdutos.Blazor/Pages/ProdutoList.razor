@page "/Produtos"
@using CatalogoDeProdutos.Core.models
@inject IProdutoHandler produtoHandler
@inject IJSRuntime JSRuntime

<h1>PRODUTOS</h1>

@if (produtos == null)
{
    <p>Carregando produtos...</p>
}
else if (!produtos.Any())
{
    <p>Nenhum produto encontrado.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>NOME</th>
                <th>PREÇO</th>
                <th>DESCRIÇÃO</th>
                <th>QUANTIDADE</th>
                <th>TIPO</th>
                <th>AÇÕES</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var produto in produtos)
            {
                <tr>
                    <td>@produto.Id</td>
                    <td>@produto.Nome</td>
                    <td>@produto.Preco.ToString("C")</td>
                    <td>@produto.Descricao</td>
                    <td>@produto.Quantidade</td>
                    <td>@produto.Tipo</td>
                    <td>
                        <div class="d-flex">
                            <button class="btn btn-link text-primary" @onclick=@(() => EditarProduto(produto.Id))
                                title="Editar">
                                <i class="bi bi-pencil"></i>
                            </button>
                            <button class="btn btn-link text-danger" @onclick=@(() => ExcluirProduto(produto.Id))
                                title="Excluir">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    public List<Produto> produtos { get; set; } = new List<Produto>();

    protected override async Task OnInitializedAsync()
    {
        await CarregarProdutos();
    }

    private async Task CarregarProdutos()
    {
        var response = await produtoHandler.GetProdutos(new PagedRequest { PageNumber = 1, PageSize = 10 });

        Console.WriteLine($"Resposta ao obter produtos: Success={response!.Success}, Message={response.Message}");

        if (response != null && response.Success && response.Data != null)
        {
            produtos = response.Data; 
        }
        else
        {
            produtos = new List<Produto>(); 
        }
    }

    private void EditarProduto(long id)
    => Navigation.NavigateTo($"/produtos/edit/{id}");

    private async Task ExcluirProduto(long produtoId)
    {
        bool confirmado = await JSRuntime.InvokeAsync<bool>
        ("confirme",
        new object[]
        { $"Tem certeza que deseja excluir o produto {produtoId}?" });


        var request = new DeleteProdutoRequest { id = produtoId };
        var response = await produtoHandler.DeleteProduto(request);

        if (response.Success)
        {
            produtos.RemoveAll(p => p.Id == produtoId);
            Console.WriteLine("Produto excluído com sucesso.");
        }
        else
        {
            Console.WriteLine(response.Message);
        }
    }
}
